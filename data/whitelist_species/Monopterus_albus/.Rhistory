pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("female",1),rep("neomale",1),rep("male",1))
cbPalette <- c("#8f0000",  "#2463ff", "#1c79b2")
stage <- factor(PCA_values$group,levels =  c("female","neomale","male"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
setwd("/Users/lyy/Desktop/featurecountall/oryzias_latipes")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:8]
names(Gonad_expression) <- c("male","neomale","female")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("male",1),rep("neomale",1),rep("female",1))))
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
vsd_sc <- varianceStabilizingTransformation(dds_sc)
rv <- rowVars(assay(vsd_sc))
select <- order(rv, decreasing=TRUE)[seq_len(min(10000, length(rv)))]
pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("male",1),rep("neomale",1),rep("female",1))
cbPalette <- c("#8f0000",  "#2463ff", "#1c79b2")
stage <- factor(PCA_values$group,levels =  c("male","neomale","female"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
############################################################
# PCA loadings
############################################################
pca_loadings <- as.data.frame(pca$rotation,row.names = row.names(pca$rotation))
# Plot loadings
plot(pca$rotation[,1], pca$rotation[,2],
xlim=c(-0.05,0.05), ylim=c(-0.05,0.05),
main='Loadings for PC1 vs. PC2', type = "p")
# Thresholds
ranges_perc = c(0.005,0.995) # 500 values
PC1_quantiles <- quantile(pca_loadings$PC1,ranges_perc)
PC1_min = as.numeric(PC1_quantiles[1])
PC1_max = as.numeric(PC1_quantiles[2])
PC2_quantiles <- quantile(pca_loadings$PC2,ranges_perc)
PC2_min = as.numeric(PC2_quantiles[1])
PC2_max = as.numeric(PC2_quantiles[2])
# Module Components
comp_1_left = pca_loadings[pca_loadings$PC1<=PC1_min,]
comp_1_right = pca_loadings[pca_loadings$PC1>=PC1_max,]
# Euler diagram
left_names = rownames(comp_1_left)
right_names = rownames(comp_1_right)
#left_names <- as.data.frame(left_names)
#right_names <- as.data.frame(right_names)
#left <- left_names[- grep("LOC", left_names[,1]),]
#right <- right_names[- grep("LOC", right_names[,1]),]
write.table(left_names,"female.txt",col.names = FALSE,row.names = FALSE)
#left_names <- as.data.frame(left_names)
#right_names <- as.data.frame(right_names)
#left <- left_names[- grep("LOC", left_names[,1]),]
#right <- right_names[- grep("LOC", right_names[,1]),]
write.table(left_names,"male.txt",col.names = FALSE,row.names = FALSE)
write.table(right_names,"female.txt",col.names = FALSE,row.names = FALSE)
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
countdata <- data[,6:8]
cpm <- t(t(countdata)/colSums(countdata) * 1000000)
male <- cpm[,1]
neomale <-  cpm[,2]
female <-  cpm[,3]
finaldata <- cbind(male,neomale,female)
male<- finaldata[rownames(finaldata) %in% left_names,]
male <- t(scale(t(male)))
Heatmap(male, name = "Exp",cluster_rows = TRUE, cluster_columns = FALSE,show_row_names = FALSE)
female<- finaldata[rownames(finaldata) %in% right_names,]
female <- t(scale(t(female)))
Heatmap(female, name = "Exp",cluster_rows = TRUE, cluster_columns = FALSE,show_row_names = FALSE)
setwd("/Users/lyy/Desktop/featurecountall/paralichthys_olivaceus")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:9]
names(Gonad_expression) <- c("female","neomale")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
)
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",2),rep("neomale",2))))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",2),rep("neomale",2))))
setwd("/Users/lyy/Desktop/featurecountall/paralichthys_olivaceus")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:9]
names(Gonad_expression) <- c("female","neomale")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",2),rep("neomale",2))))
data_sc <- data_sc[!null,]
data_sc <- data_sc[!Null,]
data_sc <- data_sc[!Null,]
head(data_sc)
names(Gonad_expression) <- c("female1","female2","neomale1","neomale2")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",2),rep("neomale",2))))
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
vsd_sc <- varianceStabilizingTransformation(dds_sc)
rv <- rowVars(assay(vsd_sc))
select <- order(rv, decreasing=TRUE)[seq_len(min(10000, length(rv)))]
pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("female",2),rep("neomale",2))
cbPalette <- c("#8f0000",  "#2463ff")
stage <- factor(PCA_values$group,levels =  c("female","neomale"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
############################################################
# PCA loadings
############################################################
pca_loadings <- as.data.frame(pca$rotation,row.names = row.names(pca$rotation))
# Plot loadings
plot(pca$rotation[,1], pca$rotation[,2],
xlim=c(-0.05,0.05), ylim=c(-0.05,0.05),
main='Loadings for PC1 vs. PC2', type = "p")
# Thresholds
ranges_perc = c(0.005,0.995) # 500 values
PC1_quantiles <- quantile(pca_loadings$PC1,ranges_perc)
PC1_min = as.numeric(PC1_quantiles[1])
PC1_max = as.numeric(PC1_quantiles[2])
PC2_quantiles <- quantile(pca_loadings$PC2,ranges_perc)
PC2_min = as.numeric(PC2_quantiles[1])
PC2_max = as.numeric(PC2_quantiles[2])
# Module Components
comp_1_left = pca_loadings[pca_loadings$PC1<=PC1_min,]
comp_1_right = pca_loadings[pca_loadings$PC1>=PC1_max,]
# Euler diagram
left_names = rownames(comp_1_left)
right_names = rownames(comp_1_right)
#left_names <- as.data.frame(left_names)
#right_names <- as.data.frame(right_names)
#left <- left_names[- grep("LOC", left_names[,1]),]
#right <- right_names[- grep("LOC", right_names[,1]),]
write.table(left_names,"female.txt",col.names = FALSE,row.names = FALSE)
write.table(right_names,"male.txt",col.names = FALSE,row.names = FALSE)
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
countdata <- data[,6:9]
cpm <- t(t(countdata)/colSums(countdata) * 1000000)
male <-apply(cpm[,1:2], 1, mean,na.rm=T)
neomale <- apply(cpm[,3:4], 1, mean,na.rm=T)
finaldata <- cbind(male,neomale)
male<- finaldata[rownames(finaldata) %in% left_names,]
male <- t(scale(t(male)))
Heatmap(male, name = "Exp",cluster_rows = TRUE, cluster_columns = FALSE,show_row_names = FALSE)
female <-apply(cpm[,1:2], 1, mean,na.rm=T)
neomale <- apply(cpm[,3:4], 1, mean,na.rm=T)
finaldata <- cbind(female,neomale)
female <-apply(cpm[,1:2], 1, mean,na.rm=T)
neomale <- apply(cpm[,3:4], 1, mean,na.rm=T)
finaldata <- cbind(female,neomale)
female<- finaldata[rownames(finaldata) %in% left_names,]
female <- t(scale(t(female)))
Heatmap(female, name = "Exp",cluster_rows = TRUE, cluster_columns = FALSE,show_row_names = FALSE)
neomale<- finaldata[rownames(finaldata) %in% right_names,]
neomale <- t(scale(t(neomale)))
Heatmap(neomale, name = "Exp",cluster_rows = TRUE, cluster_columns = FALSE,show_row_names = FALSE)
female<- finaldata[rownames(finaldata) %in% left_names,]
head(female)
setwd("/Users/lyy/Desktop/featurecountall/Thalassoma")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:11)]
Gonad_expression <- data[,6:11]
names(Gonad_expression) <- c("female1","female2","female3","pseudomale1","pseudomale2","pseudomale3")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",3),rep("pseudomale",3))))
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
vsd_sc <- varianceStabilizingTransformation(dds_sc)
rv <- rowVars(assay(vsd_sc))
select <- order(rv, decreasing=TRUE)[seq_len(min(10000, length(rv)))]
pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("female",3),rep("pseudomale",3))
cbPalette <- c("#8f0000", "#ff0000")
stage <- factor(PCA_values$group,levels =  c("female","pseudomale"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
############################################################
# PCA loadings
############################################################
pca_loadings <- as.data.frame(pca$rotation,row.names = row.names(pca$rotation))
# Plot loadings
plot(pca$rotation[,1], pca$rotation[,2],
xlim=c(-0.05,0.05), ylim=c(-0.05,0.05),
main='Loadings for PC1 vs. PC2', type = "p")
# Thresholds
ranges_perc = c(0.005,0.995) # 500 values
PC1_quantiles <- quantile(pca_loadings$PC1,ranges_perc)
PC1_min = as.numeric(PC1_quantiles[1])
PC1_max = as.numeric(PC1_quantiles[2])
PC2_quantiles <- quantile(pca_loadings$PC2,ranges_perc)
PC2_min = as.numeric(PC2_quantiles[1])
PC2_max = as.numeric(PC2_quantiles[2])
# Module Components
comp_1_left = pca_loadings[pca_loadings$PC1<=PC1_min,]
comp_1_right = pca_loadings[pca_loadings$PC1>=PC1_max,]
# Euler diagram
left_names = rownames(comp_1_left)
right_names = rownames(comp_1_right)
#left_names <- as.data.frame(left_names)
#right_names <- as.data.frame(right_names)
#left <- left_names[- grep("LOC", left_names[,1]),]
#right <- right_names[- grep("LOC", right_names[,1]),]
write.table(left_names,"female.txt",col.names = FALSE,row.names = FALSE)
write.table(right_names,"male.txt",col.names = FALSE,row.names = FALSE)
setwd("/Users/lyy/Desktop/featurecountall/trachemys_scripta")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:ncol(data)]
names(Gonad_expression) <- c("female","male")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",1),rep("male",1))))
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
vsd_sc <- varianceStabilizingTransformation(dds_sc)
rv <- rowVars(assay(vsd_sc))
select <- order(rv, decreasing=TRUE)[seq_len(min(10000, length(rv)))]
pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("female",1),rep("male",1))
cbPalette <- c("#8f0000", "#ff0000")
stage <- factor(PCA_values$group,levels =  c("female","male"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
############################################################
# PCA loadings
############################################################
pca_loadings <- as.data.frame(pca$rotation,row.names = row.names(pca$rotation))
# Plot loadings
plot(pca$rotation[,1], pca$rotation[,2],
xlim=c(-0.05,0.05), ylim=c(-0.05,0.05),
main='Loadings for PC1 vs. PC2', type = "p")
# Thresholds
ranges_perc = c(0.005,0.995) # 500 values
PC1_quantiles <- quantile(pca_loadings$PC1,ranges_perc)
PC1_min = as.numeric(PC1_quantiles[1])
PC1_max = as.numeric(PC1_quantiles[2])
PC2_quantiles <- quantile(pca_loadings$PC2,ranges_perc)
PC2_min = as.numeric(PC2_quantiles[1])
PC2_max = as.numeric(PC2_quantiles[2])
# Module Components
comp_1_left = pca_loadings[pca_loadings$PC1<=PC1_min,]
comp_1_right = pca_loadings[pca_loadings$PC1>=PC1_max,]
# Euler diagram
left_names = rownames(comp_1_left)
right_names = rownames(comp_1_right)
left_names <- as.data.frame(left_names)
right_names <- as.data.frame(right_names)
#left <- left_names[- grep("LOC", left_names[,1]),]
#right <- right_names[- grep("LOC", right_names[,1]),]
write.table(left_names,"female.txt",col.names = FALSE,row.names = FALSE)
write.table(right_names,"male.txt",col.names = FALSE,row.names = FALSE)
setwd("/Users/lyy/Desktop/featurecountall/xenopus_laevis")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:ncol(data)]
names(Gonad_expression) <- c("female1","female2","female3","female4","pseudomale1","pseudomale2","pseudomale3","pseudomale4")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",4),rep("pseudomale",4))))
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
vsd_sc <- varianceStabilizingTransformation(dds_sc)
rv <- rowVars(assay(vsd_sc))
select <- order(rv, decreasing=TRUE)[seq_len(min(10000, length(rv)))]
pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("female",4),rep("pseudomale",4))
cbPalette <- c("#8f0000", "#ff0000")
stage <- factor(PCA_values$group,levels =  c("female","pseudomale"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
setwd("/Users/lyy/Desktop/featurecountall/xenopus_laevis")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:ncol(data)]
names(Gonad_expression) <- c("female1","pseudomale1")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",1),rep("pseudomale",1))))
Gonad_expression <- data[,c(6,10]
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression <- data[,c(6,10)]
names(Gonad_expression) <- c("female1","pseudomale1")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",1),rep("pseudomale",1))))
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
vsd_sc <- varianceStabilizingTransformation(dds_sc)
rv <- rowVars(assay(vsd_sc))
select <- order(rv, decreasing=TRUE)[seq_len(min(10000, length(rv)))]
pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("female",1),rep("pseudomale",1))
cbPalette <- c("#8f0000", "#ff0000")
stage <- factor(PCA_values$group,levels =  c("female","pseudomale"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
############################################################
# PCA loadings
############################################################
pca_loadings <- as.data.frame(pca$rotation,row.names = row.names(pca$rotation))
# Plot loadings
plot(pca$rotation[,1], pca$rotation[,2],
xlim=c(-0.05,0.05), ylim=c(-0.05,0.05),
main='Loadings for PC1 vs. PC2', type = "p")
# Thresholds
ranges_perc = c(0.005,0.995) # 500 values
PC1_quantiles <- quantile(pca_loadings$PC1,ranges_perc)
PC1_min = as.numeric(PC1_quantiles[1])
PC1_max = as.numeric(PC1_quantiles[2])
PC2_quantiles <- quantile(pca_loadings$PC2,ranges_perc)
PC2_min = as.numeric(PC2_quantiles[1])
PC2_max = as.numeric(PC2_quantiles[2])
# Module Components
comp_1_left = pca_loadings[pca_loadings$PC1<=PC1_min,]
comp_1_right = pca_loadings[pca_loadings$PC1>=PC1_max,]
# Euler diagram
left_names = rownames(comp_1_left)
right_names = rownames(comp_1_right)
#left_names <- as.data.frame(left_names)
#right_names <- as.data.frame(right_names)
#left <- left_names[- grep("LOC", left_names[,1]),]
#right <- right_names[- grep("LOC", right_names[,1]),]
write.table(left_names,"female.txt",col.names = FALSE,row.names = FALSE)
write.table(right_names,"male.txt",col.names = FALSE,row.names = FALSE)
left_names
right_names
setwd("/Users/lyy/Desktop/featurecountall/Malbus")
data <- read.csv("counts.txt",row.names="Geneid",sep="\t")
metadata <- data[,1:5]#鎻愬彇鍩哄洜淇℃伅count鏁版嵁鍓嶇殑鍑犲垪
Gonad_expression <- data[,6:8]
names(Gonad_expression) <- c("female1","pseudomale1","male")
Gonad_expression_data <- as.data.frame(sapply(Gonad_expression, as.integer),row.names = row.names(Gonad_expression))
low_count_mask <- rowSums(Gonad_expression_data) < 10
sprintf("Removing %d low-count genes (%d remaining).", sum(low_count_mask),
sum(!low_count_mask))
Gonad_expression_clean <- Gonad_expression_data[!low_count_mask,]
data_sc <- Gonad_expression_clean
samples_sc <- data.frame(row.names=c(colnames(data_sc)),
stage=as.factor(c(rep("female",1),rep("pseudomale",1),rep("male",1))))
dds_sc <- DESeqDataSetFromMatrix(countData = data_sc, colData=samples_sc, design= ~stage)
dds_sc <- estimateSizeFactors(dds_sc)
vsd_sc <- varianceStabilizingTransformation(dds_sc)
rv <- rowVars(assay(vsd_sc))
select <- order(rv, decreasing=TRUE)[seq_len(min(10000, length(rv)))]
pca <- prcomp(t(assay(vsd_sc)[select,]))
summary(pca)
PCA_values <- as.data.frame(pca$x)
PCA_values$group <- c(rep("female",1),rep("pseudomale",1),rep("male",1))
cbPalette <- c("#8f0000", "#ff0000","#2463ff")
stage <- factor(PCA_values$group,levels =  c("female","pseudomale","male"))
plot_figure_PCA <- ggplot(PCA_values, aes(x = PC1, y = PC2))+
geom_point(aes(color = stage),size=5,alpha=0.9) +
scale_color_manual(values=cbPalette) +
stat_conf_ellipse(aes(color = PCA_values$group,fill=PCA_values$group),alpha=0.2,geom = "polygon",bary = TRUE) +
labs(x = "PC1: 63% variance", y = "PC2: 11% variance") +
theme(axis.text = element_text(size=14),axis.title = element_text(size=16),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
plot_figure_PCA
############################################################
# PCA loadings
############################################################
pca_loadings <- as.data.frame(pca$rotation,row.names = row.names(pca$rotation))
# Plot loadings
plot(pca$rotation[,1], pca$rotation[,2],
xlim=c(-0.05,0.05), ylim=c(-0.05,0.05),
main='Loadings for PC1 vs. PC2', type = "p")
# Thresholds
ranges_perc = c(0.005,0.995) # 500 values
PC1_quantiles <- quantile(pca_loadings$PC1,ranges_perc)
PC1_min = as.numeric(PC1_quantiles[1])
PC1_max = as.numeric(PC1_quantiles[2])
PC2_quantiles <- quantile(pca_loadings$PC2,ranges_perc)
PC2_min = as.numeric(PC2_quantiles[1])
PC2_max = as.numeric(PC2_quantiles[2])
# Module Components
comp_1_left = pca_loadings[pca_loadings$PC1<=PC1_min,]
comp_1_right = pca_loadings[pca_loadings$PC1>=PC1_max,]
# Euler diagram
left_names = rownames(comp_1_left)
right_names = rownames(comp_1_right)
#left_names <- as.data.frame(left_names)
#right_names <- as.data.frame(right_names)
#left <- left_names[- grep("LOC", left_names[,1]),]
#right <- right_names[- grep("LOC", right_names[,1]),]
write.table(left_names,"female.txt",col.names = FALSE,row.names = FALSE)
write.table(right_names,"male.txt",col.names = FALSE,row.names = FALSE)
